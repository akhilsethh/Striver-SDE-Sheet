// Brute Force Approach

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        for(int i = 0; i < rows; ++i){
            for(int j = 0; j < cols; ++j){
                if(matrix[i][j] == 0){
                    for(int c = 0; c < cols; ++c){
                        if(matrix[i][c] != 0){
                            matrix[i][c] = '-1';
                        }
                    }
                    for(int r = 0; r < rows; ++r){
                        if(matrix[r][j] != 0){
                            matrix[r][j] = '-1';
                        }
                    }
                }
            }
        }
        for(int i = 0; i < rows; ++i){
            for(int j = 0; j < cols; ++j){
                if(matrix[i][j] == '-1'){
                    matrix[i][j] = 0;
                }
            }
        }
    }
};

//Optimal Approach --> Taking Dummy Arrays outside the matrix.

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        vector<int> a(rows,-1);                   //vector a of size rows containing all the elements of -1
        vector<int> b(cols, -1);                  //vector b of size cols containing all the elements of -1
        for(int i = 0; i < rows; ++i){
            for(int j = 0; j < cols; ++j){
                if(matrix[i][j] == 0){
                    b[j] = 0;
                    a[i] = 0;
                }
            }
        }
        for(int i = 0;i < rows; ++i){
            for(int j = 0; j < cols; ++j){
                if(a[i] == 0 || b[j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
    }
};
